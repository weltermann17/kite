(in-ns 'kite-test)

(expect (type @(result (/ 2 0))) (type @(result (/ 1 0))))
(expect ArithmeticException (throw (deref (match-result (result (/ 1 0)) inc identity))))
(expect ArithmeticException (throw (deref (fmap inc (result (/ 1 0))))))
(expect OutOfMemoryError (failure (OutOfMemoryError.)))
(expect (partial satisfies? Failure) (failure (ArithmeticException.)))
(expect (success 2) (result (+ 1 1)))
(expect (success 2) (fmap inc (result (+ 1 0))))
(expect (success 8) (<*> (success +) (success 8)))
(expect (success 21) (<*> (success +) (success 8) (success 7) (success 6)))
(expect (success 21) (<*> (success +) (just 8) (just 7) (just 6)))
(expect (nothing) (<*> (success +) (just 8) (nothing) (just 6)))
(expect (failure 7) (<*> (success +) (success 8) (failure 7) (success 6)))
(expect (failure 7) (<*> (success +) (success 8) (failure 7) (failure 6)))
(expect (success 8) (>>= (success 8) #(success (inc %)) #(success (dec %))))
(expect (success [8 8]) (>>= (success 8) #(success [%1 %1])))
(expect (success [9 9]) (>>= (success 8) #(success (inc %)) #(success [%1 %1])))
(expect (success [8 8]) (sequence-a (repeat 2 (success 8))))
(expect (failure 8) (sequence-a [(success 8) (failure 8) (success 8)]))
(expect (success 24) ((lift +) (success 8) (success 8) (success 8)))
(expect (success [1 5 3]) (m-do [x (success 1)] (success 2) [:let y 5, z 3] (success [x y z])))
(expect (success [1 2]) (m-do [x (success 1) y (success 2)] [:return [x y]]))
(expect (failure 3) (m-do [x (success 1) y (success 2) z (failure 3)] [:return [x y z]]))
(expect (nothing) (m-do [x (success 1) y (nothing) z (success 3)] [:return [x y z]]))
(expect (success [1 2 3]) (m-do [x (success 1) y (result 2) z (just 3)] [:return [x y z]]))

;; eof
